join: (`` (:res :str (^str` ` ^res) concat) fold)

isEmpty?: (`` =)

take: (`implement` todo)

drop: (`implement` todo)

split: (#{
internal__strings__split :: proc(env: ^Env) {
    separator := pop(&env.stack)
    value := pop(&env.stack)

    #partial switch sep in separator {
    case string:
        #partial switch &val in value {
        case string:
            result : Quote
            defer delete(result)

            for str in strings.split_iterator(&val, sep) {
                append(&result, str)
			}

			append(&env.stack, result)
        case:
            panic("Expected a string for separating")
        }
    case:
        panic("Expected a string for a separator")
    }
}
}#)

lines: (`
` split)